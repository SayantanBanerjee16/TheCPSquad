class Solution {
    static int helper(int arr[] , int a , int n , int dp[]){
        if(n <= 0)
            return 0;
        if(a == 0 && n == 1)
            return arr[a];
        if(a == 1 && n == 1)
            return 0;
        if(dp[n] != -1)
            return dp[n];
        dp[n] = Math.max(arr[n-1] + helper(arr , a , n - 2 , dp) , helper(arr , a , n - 1 , dp));
        return dp[n];
    }
    public int rob(int[] nums) {
        if(nums.length == 1)    return nums[0];
        if(nums.length == 2)    return Math.max(nums[0], nums[1]);
        int dp[] = new int[nums.length + 1];
        Arrays.fill(dp , -1);
        int a = helper(nums , 0 , nums.length-1 , dp);
        int dp1[] = new int[nums.length + 1];
        Arrays.fill(dp1 , -1);
        int b = helper(nums , 1 , nums.length , dp1);
        return Math.max(a,b);
    }
}