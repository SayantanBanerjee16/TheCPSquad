/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head->next==NULL) return true;
        //middle
        auto slow = head;
        auto fast = head;
        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        //reverse
        ListNode* prev = NULL, *cur = head;
        while(cur != slow){
            ListNode* next = cur->next;
            cur->next = prev;
            prev = cur;
            cur = next;
        }
        //for odd
        if(fast){
            slow = slow->next;
        }
        //check
        while(slow && prev) {
            if(slow->val != prev->val) return false;
            else{
                slow = slow->next;
                prev = prev->next;
            }
        }
        return true;
    }
};
